public class RainbowTable
{
    public RainbowTable() {

    }

    public static void main(String[] args) {
        long res = 0;
        int i;
        String start;

	if (args != null && args.length > 0) { // Check for <input> value
		start = args[0];
			
		if (start.length() != 8) {
		    System.out.println("Input " + start + " must be 8 characters long - Exit");
		}
		else {
		    // Your code for problem 1 starts here   
		    for(i = 0; i < 10000; i++)      //Loops 10000 times
		    {   //Problem 1
		        res = hashFunction(start);    //calls the hashFunction()
		        start = reductionFunction(res, i);    //calls the reductionFunction()
		        //Problem 2
		        if(res == 895210601874431214L || res == 750105908431234638L || res == 111111111115664932L || res == 977984261343652499L)
		        {   //If the hash code equals the given values, it displays the password
		            System.out.println("The hash code: "+res+" is the password: "+start);
		        }
		    }	
		    System.out.println(args[0]+" produces the value "+start+" after "+(i)+" interations."); 
		}   //Prints out the start value submitted, the end value and the number of iterations
		}
		else { // No <input> 
			System.out.println("Use: RainbowTable <Input>");
		} 
    }
        
    private static long hashFunction(String s){
        long ret = 0;
        int i;
        long[] hashA = new long[]{1, 1, 1, 1};
        
        String filler, sIn;
        
        int DIV = 65536;
        
        filler = new String("ABCDEFGHABCDEFGHABCDEFGHABCDEFGHABCDEFGHABCDEFGHABCDEFGHABCDEFGH");
        
        sIn = s + filler; // Add characters, now have "<input>HABCDEF..."
        sIn = sIn.substring(0, 64); // // Limit string to first 64 characters

        for (i = 0; i < sIn.length(); i++) {
            char byPos = sIn.charAt(i); // get i'th character
            hashA[0] += (byPos * 17111); // Note: A += B means A = A + B
            hashA[1] += (hashA[0] + byPos * 31349);
            hashA[2] += (hashA[1] - byPos * 101302);
            hashA[3] += (byPos * 79001);
        } 
           
        ret = (hashA[0] + hashA[2]) + (hashA[1] * hashA[3]);
        if (ret < 0) ret *= -1;
        return ret;
    } 
    
    private static String reductionFunction(long val, int round) {  // Note that for the first function call "round" has to be 0, 
        String car, out;                                            // and has to be incremented by one with every subsequent call. 
        int i;                                                      // I.e. "round" created variations of the reduction function.
        char dat;                                                  
        
        car = new String("0123456789ABCDEFGHIJKLMNOPQRSTUNVXYZabcdefghijklmnopqrstuvwxyz!#");
        out = new String("");
      
        for (i = 0; i < 8; i++) {
            val -= round;
            dat = (char) (val % 63);
            val = val / 83;
            out = out + car.charAt(dat);
        }
        
        return out;
    }
}
